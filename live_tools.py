# meta developer: @veyrixzz

from .. import loader, utils
import requests

class LiveToolsMod(loader.Module):
    """Live-—Ç—Ä–µ–∫–µ—Ä –æ—Ç veyrixzz ‚Äî –≤—Å–µ –≤–∞–ª—é—Ç—ã, –≤—Å—è –∫—Ä–∏–ø—Ç–∞, —Å–æ–ª–Ω—Ü–µ"""
    strings = {"name": "LiveTools"}

    async def client_ready(self, client, db):
        self.client = client

    @loader.command()
    async def –∫—É—Ä—Å(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å –ª—é–±–æ–π –≤–∞–ª—é—Ç—ã –∫ —Ä—É–±–ª—é: .–∫—É—Ä—Å usd"""
        code = utils.get_args_raw(message).lower()
        if not code:
            await message.edit("üí± –£–∫–∞–∂–∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã: .–∫—É—Ä—Å usd")
            return
        try:
            data = requests.get("https://www.cbr-xml-daily.ru/daily_json.js").json()
            valutes = data["Valute"]
            if code.upper() not in valutes:
                available = ", ".join(valutes.keys())
                await message.edit(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–∫–∞—è –≤–∞–ª—é—Ç–∞.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ: {available.lower()}")
                return
            val = valutes[code.upper()]
            await message.edit(f"üí± {code.upper()} –∫ RUB:\n"
                               f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞: {val['Value']:.2f} ‚ÇΩ\n"
                               f"‚Ä¢ –í—á–µ—Ä–∞: {val['Previous']:.2f} ‚ÇΩ")
        except Exception as e:
            await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")

    @loader.command()
    async def crypto(self, message):
        """–ö—É—Ä—Å –ª—é–±–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∫ USD: .crypto bitcoin"""
        coin = utils.get_args_raw(message).lower()
        if not coin:
            await message.edit("ü™ô –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç—ã: .crypto bitcoin")
            return
        try:
            url = "https://api.coingecko.com/api/v3/simple/price"
            params = {"ids": coin, "vs_currencies": "usd"}
            res = requests.get(url, params=params).json()

            if coin not in res:
                await message.edit("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–π id –∏–∑ CoinGecko)")
                return

            price = res[coin]["usd"]
            await message.edit(f"ü™ô {coin.upper()} —Å–µ–π—á–∞—Å: ${price}")
        except Exception as e:
            await message.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç—ã: {e}")

    @loader.command()
    async def sun(self, message):
        """–í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞: .sun –≥–æ—Ä–æ–¥"""
        city = utils.get_args_raw(message)
        if not city:
            await message.edit("üåá –£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥: .sun krasnodar")
            return
        try:
            geo = requests.get("https://geocoding-api.open-meteo.com/v1/search", params={"name": city}).json()
            lat = geo["results"][0]["latitude"]
            lon = geo["results"][0]["longitude"]

            sun = requests.get("https://api.open-meteo.com/v1/forecast", params={
                "latitude": lat,
                "longitude": lon,
                "daily": "sunrise,sunset",
                "timezone": "auto"
            }).json()

            sunrise = sun["daily"]["sunrise"][0].split("T")[1]
            sunset = sun["daily"]["sunset"][0].split("T")[1]

            await message.edit(f"üåÖ –ì–æ—Ä–æ–¥: {city.title()}\n"
                               f"‚Ä¢ –í–æ—Å—Ö–æ–¥: {sunrise}\n"
                               f"‚Ä¢ –ó–∞–∫–∞—Ç: {sunset}")
        except:
            await message.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–ª–Ω—Ü–µ.")